from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from dotenv import load_dotenv
import os

app = Flask(__name__)
CORS(app)

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

latest_request_data = {}

def generate_response(prompt):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "你是一个帮助用户生成购物清单的助手。"},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

@app.route('/generate', methods=['POST'])
def generate():
    global latest_request_data
    data = request.get_json()
    print("收到请求:", data)

    feedback = data.get("feedback")
    if feedback:
        if not latest_request_data:
            return jsonify({"error": "无法处理反馈请求：尚未收到原始输入"}), 400
        prompt = f"""这是用户原始的购物需求：
{latest_request_data}

用户的反馈是：
{feedback}

请根据反馈优化你的建议内容。"""
    else:
        latest_request_data = data
        prompt = f"""请根据以下购物需求生成建议清单：
{data}"""

    try:
        result = generate_response(prompt)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(port=5000, debug=True)
